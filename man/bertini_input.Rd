% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bertini_input.R
\name{bertini_input}
\alias{bertini_input}
\title{Base Bertini_Input Creation}
\usage{
bertini_input(mpolyList, varorder, definitions = list(),
  configurations = list())
}
\arguments{
\item{mpolyList}{system of polynomials as either a character vector or mpolyList}

\item{varorder}{variable order (see examples)}

\item{definitions}{an optional named list of the definitions to be given to
Bertini. The definitions name all arguments used in the polynomial and
tell Bertini what type of homotopy to use. Defaults to a total-degree homotopy.}

\item{configurations}{an optional named list of configurations to be given to
Bertini.}
}
\value{
an object of class bertini_input
}
\description{
Create a basic bertini_input object from a system of polynomial equations.
A bertini_input object is a convenient way to store the information needed in
a Bertini input file. By default, \code{bertini_input} will create an
object that will be parsed as a total-degree homotopy in Bertini by grouping
all variables present, either in \code{varorder} or infered from
\code{mpolyList}, together in one variable group.
}
\examples{

if (has_bertini()) {

polys <- mp(c("x^2 + y^2 - 1", "x - y"))

# no configurations, no definitions
bertini_input(polys)

# adding definition_block
definitions <- list("variable_group" = c("x","y"),
                    "function" = c("fun1", "fun2"))
bertini_input(polys, definitions = definitions)

configurations <- list("securitymaxnorm" = 1e8)
bertini_input(polys, definitions = definitions, configurations = configurations)
}
}
